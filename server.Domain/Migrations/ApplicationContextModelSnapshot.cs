// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Domain.Database;

#nullable disable

namespace server.Domain.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("server.Domain.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("answer_id");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_true");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.CategoryQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_question_id");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("categories_questions", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.CategoryQuestionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_question_image_id");

                    b.Property<int>("CategoryQuestionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_question_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.HasKey("Id");

                    b.HasIndex("CategoryQuestionId")
                        .IsUnique();

                    b.ToTable("categories_questions_images", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("question_id");

                    b.Property<int>("CategoryQuestionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_question_id");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT")
                        .HasColumnName("content");

                    b.HasKey("Id");

                    b.HasIndex("CategoryQuestionId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.QuestionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("image_id");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT")
                        .HasColumnName("path");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("questions_images", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.UserQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_question_id");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("INTEGER")
                        .HasColumnName("answer_number");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER")
                        .HasColumnName("complete");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("question_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("UserQuestionExpiryTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_question_expiry_time");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("users_questions", (string)null);
                });

            modelBuilder.Entity("server.Domain.Models.Answer", b =>
                {
                    b.HasOne("server.Domain.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("server.Domain.Models.CategoryQuestionImage", b =>
                {
                    b.HasOne("server.Domain.Models.CategoryQuestion", "CategoryQuestion")
                        .WithOne("Image")
                        .HasForeignKey("server.Domain.Models.CategoryQuestionImage", "CategoryQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryQuestion");
                });

            modelBuilder.Entity("server.Domain.Models.Question", b =>
                {
                    b.HasOne("server.Domain.Models.CategoryQuestion", "CategoryQuestion")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryQuestion");
                });

            modelBuilder.Entity("server.Domain.Models.QuestionImage", b =>
                {
                    b.HasOne("server.Domain.Models.Question", "Question")
                        .WithOne("Image")
                        .HasForeignKey("server.Domain.Models.QuestionImage", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("server.Domain.Models.User", b =>
                {
                    b.HasOne("server.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("server.Domain.Models.UserQuestion", b =>
                {
                    b.HasOne("server.Domain.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Domain.Models.User", "User")
                        .WithMany("UserQuestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Domain.Models.CategoryQuestion", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("server.Domain.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("server.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("server.Domain.Models.User", b =>
                {
                    b.Navigation("UserQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
